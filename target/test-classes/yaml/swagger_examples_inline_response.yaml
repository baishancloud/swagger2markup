swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:

  /pet-inline-untyped/{id}:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by id"
      description: "Locate pets by their unique identifier"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique id of the pet"
        required: true
        type: "integer"
        x-example: 3
      responses:
        200:
          description: "successful operation"
          schema:
            required:
            - "id"
            - "name"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 3
              category:
                $ref: "#/definitions/Category"
              name:
                type: "string"
                example: "doggie"
              status:
                type: "string"
                description: "pet status in the store"
                enum:
                - "available"
                - "pending"
                - "sold"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet-inline-object/{id}:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by id"
      description: "Locate pets by their unique identifier"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique id of the pet"
        required: true
        type: "integer"
        x-example: 3
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            required:
            - "id"
            - "name"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 3
              category:
                $ref: "#/definitions/Category"
              name:
                type: "string"
                example: "doggie"
              status:
                type: "string"
                description: "pet status in the store"
                enum:
                - "available"
                - "pending"
                - "sold"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet-inline-titled-object/{id}:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by id"
      description: "Locate pets by their unique identifier"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Unique id of the pet"
        required: true
        type: "integer"
        x-example: 3
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            title: "pet"
            required:
            - "id"
            - "name"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 3
              category:
                $ref: "#/definitions/Category"
              name:
                type: "string"
                example: "doggie"
              status:
                type: "string"
                description: "pet status in the store"
                enum:
                - "available"
                - "pending"
                - "sold"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
